//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileShareConsoleClient.FIleTransferServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FIleTransferServiceReference.IFileTransferService")]
    public interface IFileTransferService {
        
        // CODEGEN: Контракт генерации сообщений с операцией UploadFile не является ни RPC, ни упакованным документом.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/UploadFile", ReplyAction="http://tempuri.org/IFileTransferService/UploadFileResponse")]
        FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse UploadFile(FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/UploadFile", ReplyAction="http://tempuri.org/IFileTransferService/UploadFileResponse")]
        System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse> UploadFileAsync(FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo request);
        
        // CODEGEN: Контракт генерации сообщений с именем упаковщика (DownloadRequest) сообщения DownloadRequest не соответствует значению по умолчанию (DownloadFile).
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferService/DownloadFileResponse")]
        FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo DownloadFile(FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferService/DownloadFileResponse")]
        System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo> DownloadFileAsync(FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceChannel : FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferServiceClient : System.ServiceModel.ClientBase<FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService>, FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService {
        
        public FileTransferServiceClient() {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService.UploadFile(FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, System.IO.Stream FileByteStream) {
            FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo inValue = new FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse retVal = ((FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse> FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService.UploadFileAsync(FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.UploadFileResponse> UploadFileAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo inValue = new FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService)(this)).UploadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService.DownloadFile(FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(ref string FileName, out System.IO.Stream FileByteStream) {
            FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest inValue = new FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo retVal = ((FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo> FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService.DownloadFileAsync(FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<FileShareConsoleClient.FIleTransferServiceReference.RemoteFileInfo> DownloadFileAsync(string FileName) {
            FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest inValue = new FileShareConsoleClient.FIleTransferServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            return ((FileShareConsoleClient.FIleTransferServiceReference.IFileTransferService)(this)).DownloadFileAsync(inValue);
        }
    }
}
